<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccountActivated" xml:space="preserve">
    <value>The account {0} has been activated</value>
  </data>
  <data name="AccountBlocked" xml:space="preserve">
    <value>The user {0} has been blocked until</value>
  </data>
  <data name="AccountDeactivated" xml:space="preserve">
    <value>The {0} account is deactivated</value>
  </data>
  <data name="Deleted" xml:space="preserve">
    <value>Deleted {0}</value>
  </data>
  <data name="Duplicate" xml:space="preserve">
    <value>A record with that {0} already exists</value>
  </data>
  <data name="DuplicateEmail" xml:space="preserve">
    <value>A user already exists with the email {0}</value>
  </data>
  <data name="DuplicateUserName" xml:space="preserve">
    <value>A user with the name {0} already exists</value>
  </data>
  <data name="EmailConfirm" xml:space="preserve">
    <value>Confirmed email</value>
  </data>
  <data name="EmailNotConfirm" xml:space="preserve">
    <value>The email {0} has not been confirmed</value>
  </data>
  <data name="ErrorPassword" xml:space="preserve">
    <value>Error changing password</value>
  </data>
  <data name="ErrorRequest" xml:space="preserve">
    <value>There was a problem with the application</value>
  </data>
  <data name="ErrorServerEmail" xml:space="preserve">
    <value>An error has occurred with the email service provider</value>
  </data>
  <data name="GreaterThan" xml:space="preserve">
    <value>The field {0} cannot be less than {1}</value>
  </data>
  <data name="InvalidEmail" xml:space="preserve">
    <value>{0}'s email format is invalid</value>
  </data>
  <data name="InvalidUserName" xml:space="preserve">
    <value>The username cannot have spaces or special characters</value>
  </data>
  <data name="LessThan" xml:space="preserve">
    <value>The field {0} cannot be greater than {1}</value>
  </data>
  <data name="LinkSendAccount" xml:space="preserve">
    <value>We have sent an email with a link to reactivate your account</value>
  </data>
  <data name="LinkSendEmail" xml:space="preserve">
    <value>We have sent a confirmation link to your email</value>
  </data>
  <data name="LinkSendOTP" xml:space="preserve">
    <value>We have sent an email with an OTP for validation</value>
  </data>
  <data name="LinkSendPassword" xml:space="preserve">
    <value>We have sent an email with a link to proceed with the password change</value>
  </data>
  <data name="NotEmpty" xml:space="preserve">
    <value>Field can't be empty</value>
  </data>
  <data name="NotFound" xml:space="preserve">
    <value>Record not found</value>
  </data>
  <data name="NotFoundSpecific" xml:space="preserve">
    <value>{0} not found</value>
  </data>
  <data name="NotNull" xml:space="preserve">
    <value>Field can't be null</value>
  </data>
  <data name="OTPInvalid" xml:space="preserve">
    <value>Incorrect OTP</value>
  </data>
  <data name="OTPSuccess" xml:space="preserve">
    <value>OTP Success</value>
  </data>
  <data name="PasswordRequiresDigit" xml:space="preserve">
    <value>Password must have at least one number</value>
  </data>
  <data name="PasswordRequiresNonAlphanumeric" xml:space="preserve">
    <value>The password must have at least one non-alphanumeric character</value>
  </data>
  <data name="PasswordRequiresUpper" xml:space="preserve">
    <value>Password must have at least one uppercase letter</value>
  </data>
  <data name="PasswordSuccess" xml:space="preserve">
    <value>The password has been changed</value>
  </data>
  <data name="PasswordTooShort" xml:space="preserve">
    <value>The password is too short</value>
  </data>
  <data name="ProfileAlready" xml:space="preserve">
    <value>The data has already been recorded</value>
  </data>
  <data name="ProfileInfo" xml:space="preserve">
    <value>Register the following data to view your information</value>
  </data>
  <data name="ProfileSaved" xml:space="preserve">
    <value>Saved personal data</value>
  </data>
  <data name="Success" xml:space="preserve">
    <value>Saved {0}</value>
  </data>
  <data name="Unauthorized" xml:space="preserve">
    <value>Unauthorized user</value>
  </data>
  <data name="Updated" xml:space="preserve">
    <value>Updated {0}</value>
  </data>
  <data name="UserPassInvalid" xml:space="preserve">
    <value>Incorrect username or password</value>
  </data>
  <data name="UserTokenInvalid" xml:space="preserve">
    <value>Incorrect user or token</value>
  </data>
  <data name="Welcome" xml:space="preserve">
    <value>Welcome {0}</value>
  </data>
</root>